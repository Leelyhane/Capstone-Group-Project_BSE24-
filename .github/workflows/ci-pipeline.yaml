name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on merge to main (production)
  pull_request:
    branches:
      - develop  # Trigger on PRs to develop for staging
      - main

jobs:
  build-and-test-frontend:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run Prettier
        run: npm run prettier --check . > prettier.log 2>&1 || (cat prettier.log && exit 1)

      - name: Run Jest tests
        run: npm test > test.log 2>&1 || (cat test.log && exit 1)

      - name: Build frontend
        run: npm run build > build.log 2>&1 || (cat build.log && exit 1)
        env:
          REACT_APP_CHAT_ENGINE_PROJECT_ID: ${{ secrets.REACT_APP_CHAT_ENGINE_PROJECT_ID }}

  build-and-test-backend:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run Prettier
        run: npm run prettier --check . > prettier.log 2>&1 || (cat prettier.log && exit 1)

      - name: Run Jest tests
        run: npm test > test.log 2>&1 || (cat test.log && exit 1)

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test-frontend, build-and-test-backend]

    steps:
      - name: Notify Render to Deploy Frontend (Staging)
        run: |
          curl -X POST ${{ secrets.RENDER_FRONTEND_STAGING_HOOK }} > deploy_frontend_staging.log 2>&1 || (cat deploy_frontend_staging.log && exit 1)

      - name: Notify Render to Deploy Backend (Staging)
        run: |
          curl -X POST ${{ secrets.RENDER_BACKEND_STAGING_HOOK }} > deploy_backend_staging.log 2>&1 || (cat deploy_backend_staging.log && exit 1)

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test-frontend, build-and-test-backend]

    steps:
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Notify Render to Deploy Frontend (Production)
        run: |
          curl -X POST ${{ secrets.RENDER_FRONTEND_PRODUCTION_HOOK }} > deploy_frontend_production.log 2>&1 || (cat deploy_frontend_production.log && exit 1)

      - name: Notify Render to Deploy Backend (Production)
        run: |
          curl -X POST ${{ secrets.RENDER_BACKEND_PRODUCTION_HOOK }} > deploy_backend_production.log 2>&1 || (cat deploy_backend_production.log && exit 1)

  rollback:
    name: Rollback Mechanism
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Rollback Frontend Deployment
        run: |
          curl -X POST ${{ secrets.RENDER_FRONTEND_PRODUCTION_HOOK }}/rollback > rollback_frontend.log 2>&1 || (cat rollback_frontend.log && exit 1)

      - name: Rollback Backend Deployment
        run: |
          curl -X POST ${{ secrets.RENDER_BACKEND_PRODUCTION_HOOK }}/rollback > rollback_backend.log 2>&1 || (cat rollback_backend.log && exit 1)

  monitoring:
    name: Monitoring with Prometheus
    runs-on: ubuntu-latest
    needs: deploy-to-production  # This ensures monitoring runs after deployment

    steps:
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Check Prometheus Metrics Endpoint
        run: |
          echo "Checking Prometheus metrics endpoint for the backend..."
          curl -s https://capstone-group-project-bse24-qvrm.onrender.com/metrics || exit 1

      - name: Verify Prometheus Targets
        run: |
          echo "Verifying Prometheus targets..."
          curl -s https://monitoring-production.onrender.com/api/v1/targets | jq '.data.activeTargets[] | {instance: .discoveredLabels.instance, health: .health}'

      - name: Query CPU Usage in Prometheus
        run: |
          echo "Checking CPU usage..."
          curl -G 'https://monitoring-production.onrender.com/api/v1/query' --data-urlencode 'query=rate(node_cpu_seconds_total[5m])' | jq .

      - name: Query Memory Usage in Prometheus
        run: |
          echo "Checking memory usage..."
          curl -G 'https://monitoring-production.onrender.com/api/v1/query' --data-urlencode 'query=node_memory_Active_bytes' | jq .
