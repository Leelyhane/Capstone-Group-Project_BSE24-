name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on merge to main (production)
  pull_request:
    branches:
      - develop  # Trigger on PRs to develop for staging
      - main

jobs:
  build-and-test-frontend:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run Prettier
        run: npm run prettier --check .

      - name: Run Jest tests
        run: npm test

      - name: Build frontend
        run: npm run build
        env:
          REACT_APP_CHAT_ENGINE_PROJECT_ID: ${{ secrets.REACT_APP_CHAT_ENGINE_PROJECT_ID }}

  build-and-test-backend:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run Prettier
        run: npm run prettier --check .

      - name: Run Jest tests
        run: npm test

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test-frontend, build-and-test-backend]

    steps:
      - name: Notify Render to Deploy Frontend (Staging)
        run: |
          curl -X POST ${{ secrets.RENDER_FRONTEND_STAGING_HOOK }}

      - name: Notify Render to Deploy Backend (Staging)
        run: |
          curl -X POST ${{ secrets.RENDER_BACKEND_STAGING_HOOK }}

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test-frontend, build-and-test-backend]

    steps:
      - name: Notify Render to Deploy Frontend (Production)
        run: |
          curl -X POST ${{ secrets.RENDER_FRONTEND_PRODUCTION_HOOK }}

      - name: Notify Render to Deploy Backend (Production)
        run: |
          curl -X POST ${{ secrets.RENDER_BACKEND_PRODUCTION_HOOK }}

  rollback:
    name: Rollback Mechanism
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Rollback Frontend Deployment
        run: |
          curl -X POST ${{ secrets.RENDER_FRONTEND_PRODUCTION_HOOK }}/rollback

      - name: Rollback Backend Deployment
        run: |
          curl -X POST ${{ secrets.RENDER_BACKEND_PRODUCTION_HOOK }}/rollback

  monitoring:
    name: Monitoring with Prometheus and Grafana
    runs-on: ubuntu-latest
    needs: deploy-to-production  # This ensures monitoring runs after deployment

    steps:
      - name: Configure Prometheus
        run: |
          # Check that Prometheus is running on the specified Render URL
          echo "Checking Prometheus setup..."

      - name: Configure Grafana
        run: |
          # Assume Grafana is already configured and connected to Prometheus
          echo "Grafana is already connected to Prometheus."

      - name: Verify Prometheus Targets
        run: |
          # Verify that Prometheus is scraping backend metrics
          curl -s https://prometheus-prod-13-prod-us-east-0.grafana.n/api/v1/targets | jq .
          echo "Prometheus is successfully scraping metrics."
